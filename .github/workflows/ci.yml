name: CI

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      build-dist:
        type: boolean
        default: false
  push:
    branches: main
    paths-ignore:
      - "*.md"
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - ready_for_review
    paths-ignore:
      - "*.md"
  schedule:
    - cron: 0 16 * * *

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CPP_SRC_ROOT: ./src/cpp
  CUDA_SRC_ROOT: ./src/cuda
  RUST_SRC_ROOT: ./src/rust
jobs:
  cache-vcpkg:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: restore vcpkg
        id: restore-vcpkg
        uses: actions/cache/restore@v4
        with:
          path: ./vcpkg_deps/vcpkg_installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('./vcpkg_deps/vcpkg.json') }}
          lookup-only: true

      - name: setup vcpkg
        if: ${{steps.restore-vcpkg.outputs.cache-hit!='true'}}
        run: ./scripts/vcpkg-setup.ps1
        shell: pwsh

      - name: install vcpkg dependencies
        if: ${{steps.restore-vcpkg.outputs.cache-hit!='true'}}
        run: ./scripts/vcpkg-install.ps1
        shell: pwsh

      - name: save vcpkg
        if: ${{steps.restore-vcpkg.outputs.cache-hit!='true'}}
        uses: actions/cache/save@v4
        with:
          path: ./vcpkg_deps/vcpkg_installed
          key: ${{steps.restore-vcpkg.outputs.cache-primary-key}}

  out-cache:
    needs: [cache-vcpkg]
    runs-on: ubuntu-latest
    steps:
      - run: echo "out cache."

  # region check
  ruff-lint:
    uses: Glatzel/template/.github/workflows/ruff.yml@main

  lint:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Dwarnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: ./.github/actions/setup-ci
      - name: cargo-fmt
        run: ${{env.RUST_SRC_ROOT}}/scripts/cargo-fmt.ps1
        shell: pwsh
      - name: cargo-clippy
        run: ${{env.RUST_SRC_ROOT}}/scripts/cargo-clippy.ps1
        shell: pwsh
      - name: cargo-machete
        uses: bnjbvr/cargo-machete@main

  cargo-bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-codspeed --locked

      - name: Build the benchmark target(s)
        run: cargo codspeed build -p pyxis
        working-directory: ${{env.RUST_SRC_ROOT}}

      - name: Run the benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          run: cargo codspeed run
          token: ${{ secrets.CODSPEED_TOKEN }}
          working-directory: ${{env.RUST_SRC_ROOT}}

  cargo-test:
    needs: out-cache
    strategy:
      fail-fast: false
      matrix:
        machine: [windows-latest,ubuntu-latest]
    runs-on: ${{matrix.machine}}
    steps:
      - uses: actions/checkout@v4
      - run: choco install pkgconfiglite
        if: ${{runner.os == 'Windows'}}
      - uses: ./.github/actions/setup-ci
      - uses: dtolnay/rust-toolchain@nightly

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: cargo-test
        run: ${{env.RUST_SRC_ROOT}}/scripts/cargo-test.ps1
        shell: pwsh

      - name: Upload results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}


  pytest:
    needs: out-cache
    strategy:
      fail-fast: false
      matrix:
        machine: [windows-latest,ubuntu-latest]
    runs-on: ${{matrix.machine}}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-ci
      - uses: dtolnay/rust-toolchain@stable

      - name: dev python
        run: ${{env.RUST_SRC_ROOT}}/scripts/py-develop.ps1
        shell: pwsh

      - name: test python
        run: ${{env.RUST_SRC_ROOT}}/scripts/py-pytest.ps1
        shell: pwsh

      - name: Upload results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  out-check:
    needs:
      - cargo-bench
      - lint
      - cargo-test
      - pytest
      - ruff-lint
    runs-on: ubuntu-latest
    steps:
      - run: echo "out check."

  # region build
  build:
    needs: out-cache
    strategy:
      fail-fast: false
      matrix:
        include:
          - machine: windows-latest
            method: network
            sub-packages: '["nvcc","cudart"]'
          - machine: ubuntu-latest
            method: network
            sub-packages: '["nvcc"]'
    runs-on: ${{matrix.machine}}
    steps:
      # setup
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: ./.github/actions/setup-ci
      - uses: Jimver/cuda-toolkit@v0.2.21
        with:
          cuda: '12.8.0'
          sub-packages: ${{matrix.sub-packages}}
          method: ${{matrix.method}}
      - run: choco install pkgconfiglite
        if: ${{runner.os == 'Windows'}}

      # cargo doc
      - name: cargo-doc
        if: ${{runner.os=='Linux'}}
        run: ${{env.RUST_SRC_ROOT}}/scripts/cargo-doc.ps1
        shell: pwsh

      - name: upload doc
        if: ${{runner.os=='Linux'}}
        uses: actions/upload-artifact@v4
        with:
          name: rust-doc
          path: dist/rust-doc.7z
          if-no-files-found: error

      # rust doc
      - name: sphinx build
        if: ${{runner.os=='Linux'}}
        run: ${{env.RUST_SRC_ROOT}}/scripts/py-sphinx.ps1
        shell: pwsh

      - name: upload doc
        if: ${{runner.os=='Linux'}}
        uses: actions/upload-artifact@v4
        with:
          name: python-doc
          path: dist/python-doc.7z
          if-no-files-found: error
      
      # rust-cli
      - name: build cli
        if: ${{always()}}
        run: ${{env.RUST_SRC_ROOT}}/scripts/build-cli.ps1 ${{ inputs.build-dist == 'true' && '-config dist' || null }}
        shell: pwsh
      - name: test cli
        run: ${{env.RUST_SRC_ROOT}}/crates/pyxis-cli/examples/cli.ps1
        shell: pwsh
      - name: upload cpp
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          name: pyxis-rust-cli-${{matrix.machine}}
          path: dist/*cli*.7z
          if-no-files-found: error

      # rust-py
      - name: build python (debug)
        if: ${{always()}}
        run: ${{env.RUST_SRC_ROOT}}/scripts/build-py.ps1 ${{ inputs.build-dist == 'true' && '-config dist' || null }}
        shell: pwsh
  
      - name: build python (dist)
        if: ${{always()}}
        run: ${{env.RUST_SRC_ROOT}}/scripts/build-py.ps1 -config dist
        shell: pwsh

      - name: upload whl
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          name: pyxis-py-${{matrix.machine}}
          path: dist/*.whl
          if-no-files-found: error

      # cpp
      - name: build cpp
        if: ${{always()}}
        run: ${{env.CPP_SRC_ROOT}}/scripts/build-cpp.ps1
        shell: pwsh
      - name: upload cpp
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          name: pyxis-cpp-${{matrix.machine}}
          path: dist/*cpp*.7z
          if-no-files-found: error
      # cuda
      - name: build cuda
        if: ${{always()}}
        run: ${{env.CUDA_SRC_ROOT}}/scripts/build-cuda.ps1
        shell: pwsh
      - name: upload cuda
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          name: pyxis-cuda-${{matrix.machine}}
          path: dist/*cuda*.7z
          if-no-files-found: error

      # rust-cuda
      - name: build rust cuda
        run: ${{env.RUST_SRC_ROOT}}/scripts/build-cuda.ps1
        shell: pwsh


