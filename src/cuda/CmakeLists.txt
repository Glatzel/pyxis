cmake_minimum_required(VERSION 3.25)
project(PyxisCudaProject)
enable_language(CUDA)
# Set CUDA standard
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_ARCHITECTURES 80)

# set cpp project dir
set(CPP_PROJECT_DIR ../cpp)

# Add cpp header files
# include_directories(${CPP_PROJECT_DIR}/include)
# include_directories(${CPP_PROJECT_DIR}/include)
# Add cuda source files
# set(SOURCES
#     src/datum_compense_cuda.cu
#     src/crypto_cuda.cu
# )
# set_source_files_properties(${SOURCE} PROPERTIES LANGUAGE CUDA)

# # Build CUDA static library
# add_library(pyxis_cuda_static STATIC ${SOURCES})
# set_target_properties(pyxis_cuda_static PROPERTIES
#     OUTPUT_NAME "pyxis_cuda"
#     POSITION_INDEPENDENT_CODE ON
#     CUDA_SEPARABLE_COMPILATION ON)
# target_link_libraries(pyxis_cuda_static pyxis_static)

# # Build CUDA dynamic library
# add_library(pyxis_cuda_shared SHARED ${SOURCES})
# set_target_properties(pyxis_cuda_shared PROPERTIES
#     POSITION_INDEPENDENT_CODE ON
#     OUTPUT_NAME "pyxis_cuda"
#     CUDA_SEPARABLE_COMPILATION ON)
# target_link_libraries(pyxis_cuda_shared pyxis_static)


# Generate PTX files
set(PTX_OUT_DIR ${CMAKE_BINARY_DIR}/ptx)
foreach(SOURCE ${SOURCES})
    get_filename_component(SOURCE_NAME ${SOURCE} NAME_WE)
    set(PTX_FILE ${PTX_OUT_DIR}/${SOURCE_NAME}.ptx)
    add_custom_command(
        OUTPUT ${PTX_FILE}
        COMMAND ${CMAKE_CUDA_COMPILER} -fmad=false -I ${CMAKE_CURRENT_SOURCE_DIR}/${CPP_PROJECT_DIR}/src -I ${CMAKE_CURRENT_SOURCE_DIR}/${CPP_PROJECT_DIR}/include -ptx ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE} -o ${PTX_FILE}
        DEPENDS ${SOURCE}
        COMMENT "Generating PTX file for ${SOURCE}"
    )
    add_custom_target(generate_ptx_${SOURCE_NAME} ALL DEPENDS ${PTX_FILE})

endforeach()
# Install PTX files
install(DIRECTORY ${PTX_OUT_DIR}/ DESTINATION ptx)
# install(TARGETS pyxis_cuda_static pyxis_cuda_shared
#         ARCHIVE DESTINATION lib
#         LIBRARY DESTINATION lib
#         RUNTIME DESTINATION bin)