enable_language(CUDA)
# Set CUDA standard
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_ARCHITECTURES 80)

# set cpp project dir
set(CPP_PROJECT_DIR ../cpp)

# Add cpp header files
include_directories(${CMAKE_SOURCE_DIR}/pyxis_static/include)
link_directories(${CMAKE_SOURCE_DIR}/pyxis_static)

# Add cuda source files
set(CUDA_SOURCES
    src/datum_compense_cuda.cu
    src/crypto_cuda.cu
)
set_source_files_properties(${CUDA_SOURCE} PROPERTIES LANGUAGE CUDA)

# Build CUDA static library
add_library(pyxis_cuda_static STATIC ${CPP_SOURCES} ${CUDA_SOURCES})
set_target_properties(pyxis_cuda_static PROPERTIES
    OUTPUT_NAME "pyxis_cuda"
    POSITION_INDEPENDENT_CODE ON
    CUDA_SEPARABLE_COMPILATION ON)
target_link_libraries(pyxis_cuda_static pyxis_shared)


# Build CUDA dynamic library
add_library(pyxis_cuda_shared SHARED ${CPP_SOURCES} ${CUDA_SOURCES} ${CPP_HEADERS})
set_target_properties(pyxis_cuda_shared PROPERTIES
    POSITION_INDEPENDENT_CODE ON
    CUDA_RUNTIME_LIBRARY Shared
    CUDA_RESOLVE_DEVICE_SYMBOLS ON
    OUTPUT_NAME "pyxis_cuda"
    CUDA_SEPARABLE_COMPILATION ON)
target_link_libraries(pyxis_cuda_shared pyxis_shared)


# Generate PTX files
set(PTX_OUT_DIR ${CMAKE_BINARY_DIR}/ptx)
foreach(CUDA_SOURCE ${CUDA_SOURCES})
    get_filename_component(CUDA_SOURCE_NAME ${CUDA_SOURCE} NAME_WE)
    set(PTX_FILE ${PTX_OUT_DIR}/${CUDA_SOURCE_NAME}.ptx)
    add_custom_command(
        OUTPUT ${PTX_FILE}
        COMMAND ${CMAKE_CUDA_COMPILER}
        -fmad=false
        -I ${CMAKE_CURRENT_SOURCE_DIR}/${CPP_PROJECT_DIR}/src
        -I ${CMAKE_CURRENT_SOURCE_DIR}/${CPP_PROJECT_DIR}/include
        -ptx ${CMAKE_CUDA_FLAGS}
        -o ${PTX_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/${CUDA_SOURCE}
        DEPENDS ${CUDA_SOURCE}
        COMMENT "Generating PTX file for ${CUDA_SOURCE}"
    )
    add_custom_target(generate_ptx_${CUDA_SOURCE_NAME} ALL DEPENDS ${PTX_FILE})

    # Log stderr if there's an error
    if(CUDA_ERROR)
        message(WARNING "CUDA compilation error for ${CUDA_SOURCE}: ${CUDA_ERROR}")
    endif()
endforeach()
# Install PTX files
install(DIRECTORY ${PTX_OUT_DIR}/ DESTINATION ptx)
install(TARGETS pyxis_cuda_static pyxis_cuda_shared
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)